{"version":3,"file":"sw.js","sources":["../node_modules/.pnpm/svelte@3.29.4/node_modules/svelte/internal/index.mjs","../node_modules/.pnpm/svelte@3.29.4/node_modules/svelte/store/index.mjs","../src/components/store.js","../src/utils/agent.ts","../src/components/add.html","../src/utils/format-date.ts","../src/utils/html-entity.ts","../src/components/list.html","../src/components/notify.html","../src/utils/deferred.ts","../src/components/app.html","../src/utils/router.ts","../src/sw/strategy.ts","../src/sw/version.ts","../src/sw/router.ts","../src/sw/index.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.4' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store'\n\nexport const email = writable('')\n\nexport const feeds = writable([])\n\nexport const notify = writable([])\nexport const newNotify = (msg) => {\n    const key = Date.now()\n    notify.update((prev) => [...prev, { msg, key }])\n    setTimeout(() => {\n        notify.update((prev) => [...prev.filter((x) => x.key !== key)])\n    }, 5 * 1000)\n}\n","const auth = async (r: Response) => {\n    if (r.ok) {\n        const body = await r.json()\n        return body\n    } else {\n        const msg = await r.text()\n        throw new Error(msg)\n    }\n}\n\ntype headers = Record<string, string>\n\nconst req = async (\n    method: string,\n    url: string,\n    data: null | Object,\n    headers: headers = {},\n) => {\n    if (!headers['Content-Type']) {\n        headers['Content-Type'] = 'application/json; charset=utf-8'\n    }\n    return fetch(url, {\n        method,\n        headers,\n        body: data && JSON.stringify(data),\n        redirect: 'follow',\n        mode: 'same-origin',\n        credentials: 'same-origin',\n    }).then(auth)\n}\n\nexport const get = async (url: string, headers: headers) =>\n    req('GET', url, null, headers)\nexport const post = async (\n    url: string,\n    data: Record<string, any>,\n    headers: headers,\n) => req('POST', url, data, headers)\nexport const put = async (\n    url: string,\n    data: Record<string, any>,\n    headers: headers,\n) => req('PUT', url, data, headers)\nexport const del = async (\n    url: string,\n    data: Record<string, any>,\n    headers: headers,\n) => req('DELETE', url, data, headers)\n","<div class=\"column col-12\">\n    <div class=\"input-group\">\n        <input\n            class=\"form-input\"\n            type=\"text\"\n            placeholder=\"feed url\"\n            bind:value=\"{url}\"\n        />\n        <button\n            type=\"button\"\n            class=\"btn btn-primary input-group-btn\"\n            class:loading=\"{loading}\"\n            class:disabled=\"{loading}\"\n            on:click=\"{add}\"\n        >\n            add\n        </button>\n    </div>\n</div>\n<div class=\"column col-12\"><div class=\"divider\"></div></div>\n\n<script>\n    import { feeds, notify, newNotify } from './store'\n    import * as agent from '../utils/agent'\n\n    let loading = false\n    let url = ''\n\n    const add = async () => {\n        if (loading === true) throw new Error('loading is true')\n        loading = true\n\n        agent\n            .put(`/api/v1/feeds/add`, { url })\n            .then((resp) => feeds.set(resp))\n            .then(() => newNotify('added'))\n            .catch((err) => {\n                window.alert(err.message)\n                location.reload()\n            })\n            .then(() => {\n                url = ''\n                loading = false\n            })\n    }\n</script>\n","const pad = (value: number) => `0${value}`.slice(-2)\n\nexport const format = (\n    date: Date | number | string,\n    fmt: string = 'YYYY-MM-DD hh:mm:ss',\n) => {\n    const d = new Date(date)\n    const _year = d.getFullYear()\n    const _month = d.getMonth() + 1\n    const _date = d.getDate()\n    const _hour = d.getHours()\n    const _minute = d.getMinutes()\n    const _second = d.getSeconds()\n    const pairs = {\n        YYYY: _year,\n        M: _month,\n        MM: pad(_month),\n        D: _date,\n        DD: pad(_date),\n        h: _hour,\n        hh: pad(_hour),\n        m: _minute,\n        mm: pad(_minute),\n        s: _second,\n        ss: pad(_second),\n    }\n\n    return fmt.replace(\n        /YYYY|MM?|DD?|hh?|mm?|ss?/g,\n        (matched) => pairs[matched as keyof typeof pairs] as string,\n    )\n}\n","export const encodeHtmlEntities = (raw: string): string => {\n    const pairs: Record<string, string> = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n    }\n    return raw.replace(/[&<>\"']/g, (matched) => pairs[matched])\n}\n","{#each $feeds as feed (feed.id)}\n<div class=\"column col-12\">\n    <div class=\"tile\">\n        <div class=\"tile-content\">\n            <div class=\"tile-title text-break\">\n                <a\n                    target=\"_blank\"\n                    rel=\"noopener\"\n                    href=\"{encodeHtmlEntities(feed.url)}\"\n                >\n                    {encodeHtmlEntities(feed.url)}\n                </a>\n            </div>\n            <div class=\"tile-subtitle text-gray\">\n                <span>updated @ {formatDate(feed.updated)}</span>\n            </div>\n        </div>\n        <div class=\"tile-action\">\n            <div>\n                <button\n                    type=\"button\"\n                    class=\"btn btn-error\"\n                    class:loading=\"{feed.loading}\"\n                    class:disabled=\"{feed.loading}\"\n                    on:click=\"{() => remove(feed)}\"\n                >\n                    remove\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"column col-12\"><div class=\"divider\"></div></div>\n{/each}\n\n<script>\n    import { feeds, notify, newNotify } from './store'\n    import * as agent from '../utils/agent'\n    import { format } from '../utils/format-date'\n    import { encodeHtmlEntities } from '../utils/html-entity'\n\n    const formatDate = (date) => {\n        if (date === null) return 'never'\n        return format(date)\n    }\n\n    const remove = async (feed) => {\n        const c = window.confirm(`remove \"${feed.url}\"`)\n        if (!c) return\n\n        if (feed.loading === true) throw new Error('loading is true')\n        feed.loading = true\n\n        agent\n            .del(`/api/v1/feeds/remove`, { feedID: feed.id })\n            .then((resp) => feeds.set(resp))\n            .then(() => newNotify('removed'))\n            .catch((err) => {\n                window.alert(err.message)\n                location.reload()\n            })\n    }\n</script>\n","<div\n    class=\"p-absolute m2\"\n    style=\"width: 10em; right: 0.4rem; top: 0.4rem; z-index: 10\"\n>\n    {#each $notify as n, i (n.key)}\n    <div class=\"toast toast-success mb-2\" transition:fly=\"{{x:100}}\">\n        <button\n            class=\"btn btn-clear float-right\"\n            on:click=\"{() => remove(i)}\"\n        ></button>\n        {n.msg}\n    </div>\n    {/each}\n</div>\n\n<script>\n    import { fly } from 'svelte/transition'\n    import { notify } from './store'\n\n    const remove = (idx) => {\n        notify.update((ns) => {\n            ns.splice(idx, 1)\n            return [...ns]\n        })\n    }\n</script>\n","export class Deferred<T = void> {\n    promise: Promise<T>\n    // @ts-ignore\n    resolve: (payload: T) => void\n    // @ts-ignore\n    reject: (err: Error) => void\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve\n            this.reject = reject\n        })\n    }\n}\n","<div class=\"container grid-sm\">\n    {#await loaded.promise}\n    <Loading></Loading>\n    {:then}\n    <div class=\"columns\">\n        <Heading></Heading>\n        <Add></Add>\n        <List></List>\n    </div>\n    <Notify></Notify>\n    {:catch err}\n    <Auth {err}></Auth>\n    {/await}\n</div>\n\n<script>\n    import { onMount } from 'svelte'\n\n    import Loading from './loading.html'\n    import Auth from './auth.html'\n    import Heading from './heading.html'\n    import Add from './add.html'\n    import List from './list.html'\n    import Notify from './notify.html'\n\n    import * as store from './store'\n\n    import * as agent from '../utils/agent'\n    import { Deferred } from '../utils/deferred'\n\n    const state = self.__STATE__ || {}\n    export let loaded = state.loaded || new Deferred()\n    export let email = state.email || ''\n    export let feeds = state.feeds || []\n\n    if (email) store.email.set(email)\n    if (feeds.length) store.feeds.set(feeds)\n    onMount(() => {\n        Promise.all([agent.get(`/api/v1/user`), agent.get(`/api/v1/feeds`)])\n            .then(([user, resp]) => {\n                store.email.set(user.addition.email)\n                store.feeds.set(resp)\n                if (loaded.resolve) loaded.resolve(true)\n            })\n            .catch((err) => {\n                console.error(err.stack)\n                if (loaded.reject) loaded.reject(err.message)\n            })\n    })\n</script>\n","/// <reference lib=\"webworker\" />\n\ntype Route<T> = {\n    handler: T | null\n    static: Map<string, Route<T>>\n    parameter: Map<string, Route<T>>\n    wildcard: T | null\n}\n\nclass BaseRouter<T> {\n    private _route: Route<T>\n    constructor() {\n        this._route = this._newRoute()\n    }\n    private _newRoute(): Route<T> {\n        return {\n            handler: null,\n            static: new Map(),\n            parameter: new Map(),\n            wildcard: null,\n        }\n    }\n    private _add(segments: string[], handler: T, route: Route<T>): this {\n        if (segments.length === 0) {\n            route.handler = handler\n        } else {\n            const seg = segments[0]\n            if (seg === '*') {\n                route.wildcard = handler\n            } else if (seg[0] === ':') {\n                const param = seg.slice(1)\n                const r = route.parameter.get(param) ?? this._newRoute()\n                this._add(segments.slice(1), handler, r)\n                route.parameter.set(param, r)\n            } else {\n                const r = route.static.get(seg) ?? this._newRoute()\n                this._add(segments.slice(1), handler, r)\n                route.static.set(seg, r)\n            }\n        }\n        return this\n    }\n    add(segments: string[], handler: T): this {\n        return this._add(segments, handler, this._route)\n    }\n    private _lookup(\n        segments: string[],\n        params: Map<string, string>,\n        route: Route<T>,\n    ): { handler: T | null; params: Map<string, string> } {\n        if (segments.length === 0) {\n            if (route.handler !== null) {\n                return { handler: route.handler, params }\n            }\n        } else {\n            const seg = segments[0]\n            const subSeg = segments.slice(1)\n\n            const staticRoute = route.static.get(seg)\n            if (staticRoute !== undefined) {\n                const matched = this._lookup(subSeg, params, staticRoute)\n                if (matched.handler !== null) return matched\n            }\n\n            if (seg !== '') {\n                for (const [param, paramRoute] of route.parameter) {\n                    const matched = this._lookup(subSeg, params, paramRoute)\n                    if (matched.handler !== null) {\n                        matched.params.set(param, seg)\n                        return matched\n                    }\n                }\n            }\n\n            if (route.wildcard !== null) {\n                params.set('*', segments.join('/'))\n                return { handler: route.wildcard, params }\n            }\n        }\n        return { handler: null, params }\n    }\n    lookup(segments: string[]) {\n        return this._lookup(segments, new Map(), this._route)\n    }\n}\n\nexport type Handler = (\n    event: FetchEvent,\n    params: Map<string, string>,\n) => Promise<Response>\nexport class WorkerRouter {\n    private _router: BaseRouter<Handler>\n    constructor() {\n        this._router = new BaseRouter<Handler>()\n    }\n\n    private async defaultHandler(\n        _event: FetchEvent,\n        _params: Map<string, string>,\n    ) {\n        return new Response('Handler Not Found', {\n            status: 404,\n            statusText: 'Not Found',\n        })\n    }\n    fallback(handler: Handler): this {\n        this.defaultHandler = handler\n        return this\n    }\n\n    add(method: string, pathname: string, handler: Handler): this {\n        const segments = [method.toUpperCase(), ...pathname.split('/')]\n        this._router.add(segments, handler)\n        return this\n    }\n    all(pathname: string, handler: Handler): this {\n        return this.add(':METHOD', pathname, handler)\n    }\n    head(pathname: string, handler: Handler): this {\n        return this.add('HEAD', pathname, handler)\n    }\n    get(pathname: string, handler: Handler): this {\n        return this.add('GET', pathname, handler)\n    }\n    post(pathname: string, handler: Handler): this {\n        return this.add('POST', pathname, handler)\n    }\n    put(pathname: string, handler: Handler): this {\n        return this.add('PUT', pathname, handler)\n    }\n    delete(pathname: string, handler: Handler): this {\n        return this.add('DELETE', pathname, handler)\n    }\n\n    route(event: FetchEvent): Promise<Response> {\n        const request = event.request\n        const url = new URL(request.url)\n        const segments = [\n            request.method.toUpperCase(),\n            ...url.pathname.split('/'),\n        ]\n        const matched = this._router.lookup(segments)\n        const handler = matched.handler ?? this.defaultHandler\n        const resp = handler(event, matched.params)\n        return resp\n    }\n}\n","type strategy = (cache: Cache, req: Request | string) => Promise<Response>\n\nexport const cacheOnly: strategy = async (cache, req) => {\n    const m = await cache.match(req)\n    if (m) return m\n    return new Response('Cache Not Found', {\n        status: 404,\n        statusText: 'Not Found',\n    })\n}\n\nexport const cacheFirst: strategy = async (cache, req) => {\n    const cached = await cache.match(req)\n    if (cached) return cached\n    const fetched = fetch(req).then((resp) => {\n        if (resp.ok) {\n            cache.put(req, resp.clone())\n        } else {\n            cache.delete(req)\n        }\n        return resp\n    })\n    return fetched\n}\n\nexport const networkOnly: strategy = async (_cache, req) => {\n    return fetch(req)\n}\n\nexport const networkFirst: strategy = async (cache, req) => {\n    const cached = cache.match(req)\n    const fetched = fetch(req).then((resp) => {\n        if (resp.ok) {\n            cache.put(req, resp.clone())\n        } else {\n            cache.delete(req)\n        }\n        return resp\n    })\n    const resp = fetched.catch(async (err) => {\n        const m = await cached\n        if (m) return m\n        throw err\n    })\n    return resp\n}\n\nexport const staleWhileRevalidate: strategy = async (cache, req) => {\n    const fetched = fetch(req).then((resp) => {\n        if (resp.ok) {\n            cache.put(req, resp.clone())\n        } else {\n            cache.delete(req)\n        }\n        return resp\n    })\n    const cached = await cache.match(req)\n    return cached || fetched\n}\n","declare const __SW_CACHE_VERSION__: string\nexport const CACHE_VERSION: string = __SW_CACHE_VERSION__\n","// @ts-ignore\nimport App from '../components/app.html'\nimport { WorkerRouter } from '../utils/router'\nimport * as strategy from './strategy'\nimport { CACHE_VERSION } from './version'\n\nconst just = (\n    name:\n        | 'cacheOnly'\n        | 'cacheFirst'\n        | 'networkOnly'\n        | 'networkFirst'\n        | 'staleWhileRevalidate',\n) => async (event: FetchEvent) => {\n    const cache = await caches.open(CACHE_VERSION)\n    const resp = await strategy[name](cache, event.request)\n    return resp\n}\n\nconst getThenUpdate = async (event: FetchEvent) => {\n    const cache = await caches.open(CACHE_VERSION)\n    const resp = await strategy.networkOnly(cache, event.request)\n    if (resp.ok) cache.put('/api/v1/feeds', resp.clone())\n    return resp\n}\n\nexport const router = new WorkerRouter()\n    .fallback(just('networkOnly'))\n    // homepage\n    .get('/', async (event) => {\n        const cache = await caches.open(CACHE_VERSION)\n        const resp = await strategy.cacheFirst(cache, event.request)\n\n        return Promise.all([\n            strategy.cacheOnly(cache, `/api/v1/user`),\n            strategy.cacheOnly(cache, `/api/v1/feeds`),\n        ])\n            .then(async ([user, feeds]) => {\n                if (user && feeds) {\n                    return Promise.all([user.json(), feeds.json()])\n                } else {\n                    throw new Error('cache missing')\n                }\n            })\n            .then(async ([user, feeds]) => {\n                const state = {\n                    loaded: { promise: true },\n                    email: user.addition.email,\n                    feeds: feeds,\n                }\n                const tpl = await resp.clone().text()\n                const app = App.render(state)\n                const html = tpl.replace(\n                    '<div id=\"app\"></div>',\n                    `<div id=\"app\">${\n                        app.html\n                    }</div><script>window.__STATE__=${JSON.stringify(\n                        state,\n                    )}</script>`,\n                )\n                return new Response(html, resp)\n            })\n            .catch((err) => {\n                console.error(err.stack)\n                return resp\n            })\n    })\n    // API\n    .get('/api/v1/feeds', just('staleWhileRevalidate'))\n    .get('/api/v1/user', just('staleWhileRevalidate'))\n    .put('/api/v1/feeds/add', getThenUpdate)\n    .delete('/api/v1/feeds/remove', getThenUpdate)\n    // static\n    .get('/sw.js', just('networkOnly'))\n    .get('/favicon.ico', just('cacheFirst'))\n    .get('/npm/*', just('cacheFirst'))\n    .get('/:file', (event, params) => {\n        const file = params.get('file')!\n        if (file.endsWith('.js')) {\n            return just('cacheFirst')(event)\n        } else {\n            return just('networkOnly')(event)\n        }\n    })\n","/// <reference lib=\"webworker\" />\n\nimport { router } from './router'\nimport { CACHE_VERSION } from './version'\n\ndeclare const self: ServiceWorkerGlobalScope\n\nconsole.log('[SW] current version', CACHE_VERSION)\n\nself.addEventListener('install', (event) => {\n    console.log('[SW] install | start', CACHE_VERSION)\n    const done = self\n        .skipWaiting()\n        .then(() => console.log('[SW] install | done', CACHE_VERSION))\n    event.waitUntil(done)\n})\n\nself.addEventListener('activate', (event) => {\n    console.log('[SW] activate | start', CACHE_VERSION)\n    const done = self.clients\n        .claim()\n        .then(() => caches.keys())\n        .then((keyList) => {\n            const cs = keyList\n                .filter((key) => key !== CACHE_VERSION)\n                .map((key) => caches.delete(key))\n            return Promise.all(cs)\n        })\n        .then(() => console.log('[SW] activate | done', CACHE_VERSION))\n    event.waitUntil(done)\n})\n\nself.addEventListener('fetch', (event) => {\n    console.log('[SW] fetch', event.request.url)\n    event.respondWith(router.route(event))\n})\n\nself.addEventListener('message', (event) => {\n    console.log('[SW] message |', event.data)\n    if (event.data === 'logout') {\n        const done = caches\n            .open(CACHE_VERSION)\n            .then((cache) =>\n                Promise.all([\n                    cache.delete(`/api/v1/user`),\n                    cache.delete(`/api/v1/feeds`),\n                ]),\n            )\n            .then(() => console.log('[SW] message | done', event.data))\n        event.waitUntil(done)\n    }\n})\n"],"names":["noop","run","fn","get_store_value","store","value","callbacks","unsub","subscribe","unsubscribe","_","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","escaped","\"","'","&","<",">","escape","html","String","replace","match","each","items","str","i","length","validate_component","name","$$render","on_destroy","create_ssr_component","result","props","bindings","slots","parent_component","context","Map","before_update","after_update","Object","create","render","options","title","head","css","Set","forEach","code","Array","from","map","join","add_attribute","boolean","JSON","stringify","subscriber_queue","writable","start","stop","subscribers","set","new_value","b","a","run_queue","s","update","invalidate","subscriber","index","indexOf","splice","email","feeds","notify","auth","async","r","ok","json","msg","text","get","url","headers","method","data","fetch","body","redirect","mode","credentials","then","req","pad","slice","encodeHtmlEntities","raw","pairs","matched","formatDate","date","fmt","d","Date","_year","getFullYear","_month","getMonth","_date","getDate","_hour","getHours","_minute","getMinutes","_second","getSeconds","YYYY","M","MM","D","DD","h","hh","m","mm","ss","format","$feeds","feed","updated","loading","n","Deferred","[object Object]","this","promise","Promise","resolve","reject","state","self","__STATE__","loaded","store.email","store.feeds","all","agent.get","user","resp","addition","catch","err","console","error","stack","message","BaseRouter","_route","_newRoute","handler","static","parameter","wildcard","segments","route","seg","param","_add","params","subSeg","staticRoute","undefined","_lookup","paramRoute","cacheOnly","cache","Response","status","statusText","cacheFirst","cached","put","clone","delete","networkOnly","_cache","fetched","CACHE_VERSION","just","event","caches","open","strategy","request","getThenUpdate","strategy.networkOnly","router","_router","_event","_params","defaultHandler","pathname","toUpperCase","split","add","URL","lookup","fallback","strategy.cacheFirst","strategy.cacheOnly","tpl","app","App","endsWith","log","addEventListener","done","skipWaiting","waitUntil","clients","claim","keys","keyList","cs","filter","key","respondWith"],"mappings":"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"}